<?php

/**
 * Created by Claudio Campos.
 * User: callcocam@gmail.com, contato@sigasmart.com.br
 * https://www.sigasmart.com.br
 */

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Callcocam\Planogram\Enums\ProductStatus;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->ulid('id')->primary();
            $table->ulid('tenant_id')->nullable();
            $table->foreignUlid('user_id')->nullable()->index();
            $table->foreignUlid('category_id')->constrained(); 
            $table->foreignUlid('image_id')->nullable()->constrained();
            $table->string('name')->nullable()->comment('Nome do produto');
            $table->string('slug')->unique()->nullable();
            $table->string('ean', 13)->unique()->nullable();
            $table->integer('width')->nullable();  // Largura em centímetros
            $table->integer('height')->nullable(); // Altura em centímetros
            $table->integer('depth')->nullable();  // Profundidade em centímetros
            $table->integer('facing')->default(1)->nullable(); // Quantidade de faces visíveis
            $table->integer('weight')->nullable(); // Peso em quilos
            $table->decimal('price', 10, 2)->nullable(); // Preço em reais
            $table->boolean('stackable')->default(false)->nullable();   // Pode ser empilhado
            $table->boolean('perishable')->default(false)->nullable();  // É perecível
            $table->boolean('flammable')->default(false)->nullable();   // É inflamável
            $table->boolean('hangable')->default(false)->nullable();    // Pode ser pendurado
            $table->text('description')->nullable();
            $table->enum('status', array_column(ProductStatus::cases(), 'value'))
                ->default(ProductStatus::DRAFT->value);
            $table->timestamps();
            $table->softDeletes();
        });

        // Schema::table('layers', function (Blueprint $table) { 
        //     $table->foreignUlid('product_id')->constrained()->cascadeOnDelete()->after('segment_id');
        // });
    }

    public function down(): void
    {
        Schema::dropIfExists('products');
    }
};
